const fs = require("fs");
const axios = require("axios");
const client = require("./client");
require('dotenv').config();

const DEEPSEEK_API_KEY = process.env.API_KEY; // Substitua por sua chave real
const PIX_KEY = "pix@teste.com";
const PAUSE_DURATION = 6 * 60 * 60 * 1000; // 6 horas em milissegundos
const ADMIN_NUMBER = "558282371442"; // N√∫mero do administrador

// Frases que indicam redirecionamento para humano
const HUMAN_REDIRECT_PHRASES = [
  "vou acionar um atendente humano",
  "um atendente humano ir√° entrar em contato",
  "vou transferir para um atendente",
  "aguarde enquanto conectamos voc√™",
  "nosso time entrar√° em contato",
];

// Carrega o JSON com as FAQs
function loadFAQ() {
  try {
    const rawData = fs.readFileSync("./iptv_faq.json");
    return JSON.parse(rawData);
  } catch (error) {
    console.error("Erro ao carregar o JSON:", error);
    return { faq: [], planos: {} };
  }
}

async function sendMessage(chatId, message) {
  if (!chatId.endsWith("@c.us") && !chatId.endsWith("@g.us")) {
    chatId = `${chatId}@c.us`;
  }
  console.log(`Enviando mensagem para: ${chatId}`);
  return client.sendMessage(chatId, message);
}

const iptvData = loadFAQ();

// Fun√ß√µes de controle de pausa
function isChatPaused(chatId) {
  if (!pausedChats.has(chatId)) return false;

  const pauseTime = pausedChats.get(chatId);
  const now = Date.now();

  if (now - pauseTime < PAUSE_DURATION) {
    return true; // Ainda est√° no per√≠odo de pausa
  }

  pausedChats.delete(chatId); // Remove ap√≥s 6 horas
  return false;
}

function activatePause(chatId) {
  if (isChatPaused(chatId)) {
    console.log(`[IGNORADO] Chat ${chatId} j√° est√° pausado.`);
    return; // N√£o ativa a pausa novamente
  }

  pausedChats.set(chatId, Date.now());
  console.log(`[PAUSA ATIVADA] Chat ${chatId} pausado por 6 horas`);
}

// Fun√ß√£o para notificar o administrador
async function notifyAdmin(chatId) {
  console.log(`Tentando enviar mensagem ao admin: ${ADMIN_NUMBER}`);
  await sendMessage(
    ADMIN_NUMBER,
    `‚ö†Ô∏è Voc√™ recebeu uma solicita√ß√£o de atendimento humano`
  );
  console.log("Mensagem enviada ao administrador.");
}

// System Prompt atualizado
const systemPrompt = `Voc√™ √© um assistente virtual sem nome. Suas caracter√≠sticas:
1. Quando perguntado sobre planos, responda com:
üì∫ *PLANOS IPTV* üì∫

üíµ *1 M√äS* - R$ 20 _(R$ 25 na primeira mensalidade)_
üí∞ *3 MESES* - R$ 55
üî• *6 MESES* - R$ 100 _(Apenas R$ 16,66/m√™s)_
üèÜ *1 ANO* - R$ 180 _(S√≥ R$ 15,00/m√™s)_

üí≥ Aceitamos PIX, boleto e cart√£o de cr√©dito

2. Se o cliente pedir para falar com humano, responda:
"Entendido! Um atendente humano ir√° entrar em contato em breve. Por favor, aguarde. ‚è≥"

3. Chave PIX para pagamentos: ${PIX_KEY}
33. S√≥ informe a chave pix se o cliente falar que quer pagar via pix ou pedir a chave
4. N√£o sugira que ir√° transferir o contato para um humano a n√£o ser que a pessoa pe√ßa, ou que seja uma a√ß√£o que voc√™ n√£o pode executar ou que seja uma d√∫vida que voc√™ n√£o tem certeza da resposta;
32. Mantenha respostas curtas (1-3 frases) exceto para planos
30. N√£o envie informa√ß√µes a n√£o ser que o cliente pe√ßa
31. Principais servi√ßos:
   - Planos: 1 m√™s (R$25), 3 meses (R$55), 6 meses (R$100), 1 ano (R$180)
   - Configura√ß√£o em dispositivos (SmartTV, celular, TV Box)
   - Suporte t√©cnico
   - Informa√ß√µes sobre jogos ao vivo
5. N√£o forne√ßa informa√ß√µes pessoais ou financeiras
6. N√£o fa√ßa promessas ou garantias
7. N√£o discuta quest√µes legais ou pol√≠ticas
8. N√£o forne√ßa informa√ß√µes sobre concorrentes
9. N√£o fa√ßa piadas ou coment√°rios ofensivos
10. N√£o forne√ßa informa√ß√µes sobre a empresa ou sua hist√≥ria
11. N√£o fa√ßa perguntas pessoais
12. N√£o forne√ßa informa√ß√µes sobre a equipe ou funcion√°rios
13. N√£o forne√ßa informa√ß√µes sobre a empresa ou sua hist√≥ria
14. Voc√™ n√£o √© um humano, mas sim um assistente virtual
15. Voc√™ n√£o precisa pedir dados de um cliente para que ele possa fazer um teste ou assinar um plano
16. Voc√™ n√£o pode gerar um teste, mas pode ajudar o cliente a configurar o aplicativo no dispositivo dele e em seguida um humano da equipe de suporte pode gerar o teste
17. Se o cliente perguntar sobre o valor ou sobre os planos, voc√™ deve responder com a tabela de pre√ßos, avise que √© com tudo incluso e depois perguntar qual ele prefere
18. Se o cliente perguntar o que tem no plano, voc√™ deve responder que tem mais de 20 mil canais, filmes, s√©ries e jogos ao vivo, incluindo Premiere, Sportv, Telecine e filmes da Netflix, Disney+, Amazon Prime e muitos outros
19. Se o cliente perguntar se tem todos os canais, voc√™ deve responder que tem mais de 20 mil canais, filmes, s√©ries e jogos ao vivo, incluindo Premiere, Sportv, Telecine e filmes da Netflix, Disney+, Amazon Prime e muitos outros 
20. Quando o cliente pedir para testar voc√™ deve perguntar em qual dispositivo ele gostaria de realizar o teste (Android, iPhone, computador, tvbox ou smartv)
21. Se o dispositivo do cliente for android, este √© o passo a passo de configura√ß√£o: "‚úÖ Siga os passos abaixo para configurar:\n\n" +
          "üì≤ Procura na PlayStore e baixa um aplicativo chamado *IPTV STREAM PLAYER*.\n\n" +
          "üìå Depois, pode abrir, ir√° aparecer uma tela com 3 bot√µes, voc√™ seleciona o primeiro e ele ir√° te direcionar √† p√°gina onde pede os dados de login.\n" +
          "üöÄ Quando chegar nessa tela, me informe.",
22. Se o dispositivo do cliente for celular, voc√™ deve perguntar se √© iphone ou android 
23. Se o dispositivo do cliente for smarttv, voc√™ deve perguntar qual a marca
24. Se a marca da tv do cliente for samsung, voc√™ deve passar este procedimento: "‚úÖ Siga os passos abaixo para configurar:\n\n" +
          "‚ñ™ Abra a *Loja Samsung* e instale o *SmartUp*\n" +
          "‚ñ™ Acesse: Configura√ß√µes > Geral > Rede > Status > Config. IP\n" +
          "‚ñ™ Altere o DNS para *Manual*\n" +
          "‚ñ™ Insira: 168.235.81.205 e salve\n" +
          "‚ñ™ Reinicie a TV e abra o SmartUp\n\n" +
          "üì∏ Prontinho! Me cofirme quando estiver na tela onde pede os dados de acesso\n\n" +
          "‚ö†Ô∏è *Obs:* Se n√£o encontrar o SmartUp, me avise que te ajudo a baixar outro app."
25. Se o celular do cliente for iphone, voc√ä deve passar este procedimento: "‚úÖ Siga os passos abaixo para configurar:\n\n" +
          "1. Baixe o *Smarters Player Lite* na AppStore\n" +
          "2. Abra o app e aceite os termos (Se ele pedir)\n" +
          "3. Selecione *Xtreme Codes* na tela\n\n" +
          "üîë Quando chegar na tela onde pede os dados de acesso, me avise que te envio seus dados!"
26. Se a marca da tv do cliente for LG, este √© o procedimento de configura√ß√£o: "‚úÖ Siga os passos abaixo para configurar:\n\n" +
          "‚ñ∏ Abra a loja de apps da TV (*APP* ou *LG Content Store*)\n" +
          "‚ñ∏ Instale o *IPTVSmartersPRO*\n" +
          "‚ñ∏ Abra o app > aceite os termos\n\n" +
          "üì© Quando chegar na tela onde pede os dados de acesso, me avise que te envio seus dados!"
27. Se a marca da tv do cliente n√£o for samsung nem lg, voc√ä deve perguntar se ele sabe se ela √© roku ou android, se ele n√£o souber, pede pra abrir a loja de aplicativos de enviar foto da tela
28. Se o cliente quiser renovar ou pagar, voc√™ envia a chave pix para pagamento: pix@teste.com
29. Se o cliente quiser falar com um humano, voc√™ avisa a ele que ir√° ser atendido por um humano em breve e para de responder ele pelas pr√≥ximas 6 horas, independente do que acontecer, n√£o envie mais mensagens a ele.
34. Voc√™ s√≥ deve responder o cliente se ele perguntar algo relacionado a IPTV, se ele perguntar algo que n√£o seja relacionado a IPTV, voc√™ deve responder: "Desculpe, n√£o posso ajudar com isso. Posso ajudar com IPTV?" e n√£o responda mais nada. 
35. Se a tv tiver sistema Roku, este √© o procedimento para configurar: "‚úÖ Siga os passos abaixo para configurar:\n\n" +
          "1Ô∏è‚É£ Abra a loja de aplicativos da sua TV\n" +
          "2Ô∏è‚É£ Procure pelo aplicativo *IBO PRO* e instale\n" +
          "3Ô∏è‚É£ Abra o aplicativo e me envie uma foto dos c√≥digos que aparecem na tela para que eu possa configurar para voc√™\n\n" +
          "‚ö†Ô∏è Obs: Todos os apps da TV Roku t√™m uma tarifa anual de *30 reais* (paga apenas 1x por ano).", 
36. N√£o diga que ir√° transferir ou que pode transferir para um humano a n√£o ser que o cliente pe√ßa ou que voc√™ n√£o consiga mais ajudar
37. Voc√™ n√£o pode sugerir nenhum outro app al√©m dos que j√° te ensinei
38. N√£o avise que um atendente humano vai liberar o teste ap√≥s configurar o app
39. Para deixar texto em negrito use apenas um asterisco antes e outro depois do texto inv√©s de usar 2 antes e 2 depois
40. Se o cliente enviar mais de uma mensagem em um tervalo menor que 2 segundos voc√™ deve responder apenas a primeira delas

Sempre que relevante:
- Ofere√ßa ajuda espec√≠fica
- Pe√ßa mais detalhes se necess√°rio
- Mantenha o foco no assunto de IPTV;

`;
console.log("sendMessage:", sendMessage);
// Fun√ß√£o para buscar respostas no JSON
function getFAQResponse(userMessage) {
  const lowerMessage = userMessage.toLowerCase();
  for (const item of iptvData.faq) {
    if (lowerMessage.includes(item.pergunta.toLowerCase())) {
      return item.resposta;
    }
  }
  return null;
}

// Fun√ß√£o para obter resposta da API DeepSeek
async function getDeepSeekResponse(messagesHistory) {
  try {
    const response = await axios.post(
      "https://api.deepseek.com/v1/chat/completions",
      {
        model: "deepseek-chat",
        messages: messagesHistory,
        temperature: 0.7,
        max_tokens: 300,
      },
      {
        headers: {
          Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error("Erro na API:", error.response?.data || error.message);
    return "‚ö†Ô∏è Estou com dificuldades t√©cnicas. Podemos tentar novamente?";
  }
}

// Verifica se a resposta indica redirecionamento para um humano
function isHumanRedirect(response) {
  return HUMAN_REDIRECT_PHRASES.some((phrase) =>
    response.toLowerCase().includes(phrase.toLowerCase())
  );
}

async function isContactSaved(chatId) {
  try {
    const contacts = await client.getContacts();
    const contact = contacts.find((c) => c.id._serialized === chatId);

    if (contact) {
      const isSaved = contact.isMyContact; // Verifica se o contato est√° salvo
      console.log(`[VERIFICA√á√ÉO] O contato ${chatId} est√° salvo? ${isSaved}`);
      return isSaved;
    }

    console.log(`[VERIFICA√á√ÉO] O contato ${chatId} n√£o foi encontrado na lista de contatos.`);
    return false; // Retorna false se o contato n√£o foi encontrado
  } catch (error) {
    console.error("Erro ao verificar se o contato est√° salvo:", error);
    return false; // Em caso de erro, assume que o contato n√£o est√° salvo
  }
}

// Mem√≥ria de controle de mensagens
const conversationContexts = new Map();
const pausedChats = new Map(); // { chatId: timestamp }
const lastMessageTimestamps = new Map(); // { chatId: timestamp da √∫ltima mensagem }
const processingMessages = new Set(); // Para evitar concorr√™ncia

async function processMessage(chatId, message) {
  const now = Date.now();

  // Evita concorr√™ncia: verifica se j√° est√° processando uma mensagem para este chatId
  if (processingMessages.has(chatId)) {
    console.log(`[IGNORADO] Mensagem de ${chatId} ignorada porque j√° est√° sendo processada.`);
    return null;
  }

  // Marca o chat como em processamento
  processingMessages.add(chatId);

  try {
    // Verifica se a mensagem foi enviada em menos de 2 segundos desde a √∫ltima
    if (lastMessageTimestamps.has(chatId)) {
      const lastTimestamp = lastMessageTimestamps.get(chatId);
      if (now - lastTimestamp < 2000) { // 2000 ms = 2 segundos
        console.log(`[IGNORADO] Mensagem de ${chatId} ignorada por estar dentro do intervalo de 2 segundos.`);
        return null; // Ignora a mensagem
      }
    }

    // Atualiza o timestamp da √∫ltima mensagem processada
    lastMessageTimestamps.set(chatId, now);

    // Verifica se o n√∫mero est√° salvo nos contatos
    const isSavedContact = await isContactSaved(chatId);
    if (isSavedContact) {
      console.log(`[IGNORADO] Chat ${chatId} est√° salvo nos contatos. Mensagem ignorada.`);
      return null; // Ignora a mensagem
    }

    // Verifica se o chat est√° pausado
    if (isChatPaused(chatId)) {
      console.log(`[IGNORADO] Chat ${chatId} est√° pausado. Mensagem n√£o processada.`);
      return null; // Ignora a mensagem
    }

    if (message.toLowerCase() === "falar com humano") {
      console.log(`Enviando mensagem para: ${chatId}`);
      await sendMessage(
        chatId,
        "Um atendente humano ir√° entrar em contato em breve. Por favor, aguarde. ‚è≥"
      );
      activatePause(chatId); // Ativa a pausa para o cliente imediatamente
      console.log(`[PAUSA ATIVADA] Chat ${chatId} pausado ap√≥s solicita√ß√£o de humano.`);
      await notifyAdmin(chatId); // Notifica o administrador
      return null;
    }

    // Inicializa contexto se necess√°rio
    if (!conversationContexts.has(chatId)) {
      conversationContexts.set(chatId, {
        messages: [
          { role: "system", content: systemPrompt },
          {
            role: "assistant",
            content: "Ol√°! Sou o EagleBot. Como posso te ajudar hoje? üòä",
          },
        ],
      });
    }

    const context = conversationContexts.get(chatId);

    // Adiciona mensagem do usu√°rio ao hist√≥rico
    context.messages.push({ role: "user", content: message });

    // Verifica resposta nas FAQs primeiro
    const faqResponse = getFAQResponse(message);
    if (faqResponse) {
      context.messages.push({ role: "assistant", content: faqResponse });

      // Verifica se a resposta da FAQ indica redirecionamento
      if (isHumanRedirect(faqResponse)) {
        await sendMessage(
          chatId,
          "Um atendente humano ir√° entrar em contato em breve. Por favor, aguarde. ‚è≥"
        );
        activatePause(chatId); // Ativa a pausa apenas se o chat n√£o estiver pausado
        console.log(`[PAUSA ATIVADA] Chat ${chatId} pausado ap√≥s resposta da FAQ.`);
        await notifyAdmin(chatId); // Notifica o administrador
      }

      return "Resposta autom√°tica do bot.";
    }

    // Obt√©m resposta da IA
    const aiResponse = await getDeepSeekResponse(context.messages);
    context.messages.push({ role: "assistant", content: aiResponse });

    // Verifica se a resposta indica redirecionamento para humano
    if (isHumanRedirect(aiResponse)) {
      await sendMessage(
        chatId,
        "Um atendente humano ir√° entrar em contato em breve. Por favor, aguarde. ‚è≥"
      );
      activatePause(chatId); // Ativa a pausa apenas se o chat n√£o estiver pausado
      console.log(`[PAUSA ATIVADA] Chat ${chatId} pausado ap√≥s resposta da IA.`);
      await notifyAdmin(chatId); // Notifica o administrador
      return;
    }

    // Limita o hist√≥rico
    if (context.messages.length > 10) {
      context.messages = [
        context.messages[0], // Mant√©m o system prompt
        ...context.messages.slice(-9), // Mant√©m as √∫ltimas 9 intera√ß√µes
      ];
    }

    return aiResponse;
  } finally {
    // Remove o chat do conjunto de processamento
    processingMessages.delete(chatId);
  }
}

module.exports = {
  processMessage,
};
